 Copyright (C) 2012 Sony Mobile Communications AB

 This file is part of ApkAnalyser.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

==============================================================================

Introduction
------------
ApkAnalyser is a static, virtual analysis tool for examining and validating 
the development work of your Android app. It's a complete tool chain which supports 
modification of the binary application with more printouts. You are then able to 
repack, install, run and verify the result from logcat. ApkAnalyser also supports 
resource analysis, and you can decode XML, look up resource references and detect 
potential issues in your app.

It��s a stand-alone J2SE application, released under Apache 2.0 license, 100% written in Java.


Open Source Projects
--------------------

Some code of following OSS projects are imported and modified:
1. smali, dalvik assembler/disassembler, http://code.google.com/p/smali/
2. apktool, reengineering binary Android apps, http://code.google.com/p/android-apktool/
3. Android4ME, J2ME port of Google's Android, http://code.google.com/p/android4me/
4. Android Open Source Project

Following OSS projects are used as jar library:
1. ASM, Java bytecode manipulation and analysis framework, http://asm.ow2.org/license.html 
2. Jgraphx, Java Graph Visualization Library, http://www.jgraph.com/jgraph.html
3. Xpp3, a streaming pull XML parser, http://www.extreme.indiana.edu/dist/java-repository/xpp3/distributions
4. L2fprod, extended swing components, http://www.l2fprod.com/common/


Build Infomation
----------------

Firstly, the latest ApkAnalyser is available at:

https://github.com/sonyxperiadev/ApkAnalyser

ApkAnalyser includes two open source projects, smali and apktool.
The projects must be built in sequence of:

1. smali
2. apktool
3. apkanalyser

All of the projects are managed by Maven2 build system.

http://maven.apache.org/download.html

The project could be built on JDK1.5, 1.6 or 1.7.


Build Steps
-----------

1. Get the latest code 
git clone git://github.com/sonyxperiadev/ApkAnalyser.git

2. Build smali project
cd smali
mvn install

3. Build apktool project
cd ../apktool
mvn install

4. Install jgraphx into local Maven repository
cd ../apkanalyser
mvn install:install-file -Dfile=lib/jgraphx.jar -DgroupId=com.mxgraph -DartifactId=jgraphx -Dversion=1.7.1.9 -Dpackaging=jar -DgeneratePom=true

5. Build and package ApkAnalyser
mvn assembly:assembly

6. The executable jar file should be at 
apkanalyser\target\apkanalyser-{version}-exec.jar

Optionally, Eclipse project could also be generated by "mvn eclipse:eclipse" command.


Launch ApkAnalyser
------------------

To launch it, just execute: 

java -jar ApkAnalyser.jar

Sometimes, ApkAnalyser consumes lots of memory for analysing the dalvik bytecodes. 
It may run out of memory expecially for loading more than one big odexed APK files.
In that case, the max heap size should be explicitly incrased by "-Xmx1024m" parameter: 

java -Xmx1024m -jar ApkAnalyser.jar


Contacts
--------

Zhang Bojie, Sony Mobile Communications
bojie.zhang@sonymobile.com
